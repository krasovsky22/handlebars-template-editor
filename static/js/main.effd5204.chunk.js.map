{"version":3,"sources":["hooks/useStore.ts","models/TreeNode.ts","stores/snapshots/treeData.ts","stores/AppStore.ts","components/TreeNode.tsx","MainContent.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStore","storeName","React","useContext","MobXProviderContext","TreeNodeModel","types","model","id","identifierNumber","name","string","description","maybeNull","children","array","safeReference","late","parent","isDroppable","actions","self","setChildren","childrenIds","cast","setIsDroppable","views","findIndex","node","TreeData","AppStore","treeNodes","root","afterCreate","find","treeNode","isRoot","moveTreeNodes","dragNodeSnapshot","hoverNode","dragNode","console","log","hoverNodeParent","dragNodeParent","hoverNodeIndex","nodeIndexInParentNode","newChildren","Array","from","map","child","dragNodeIndex","childId","splice","filter","APP_STORE","observer","TreeNode","useState","opened","setOpened","ref","useRef","useDrop","accept","type","hover","item","monitor","current","isOverCurrent","dragId","includes","hoveredRect","getBoundingClientRect","hoverMiddleY","bottom","top","mousePosition","getClientOffset","hoverClientY","y","collect","isOver","shallow","dropRef","useDrag","canDrag","isDragging","end","_dropResult","getItem","didDrop","drag","handleToggleButtonclick","useCallback","className","classNames","ListGroupItem","length","Button","color","onClick","icon","faMinus","faPlus","Collapse","isOpen","ListGroup","key","Container","fluid","Row","Col","md","NavigationBar","setIsOpen","Navbar","dark","expand","fixed","full","NavbarBrand","href","NavbarToggler","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","stores","create","App","Navigation","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.effd5204.chunk.js","sourcesContent":["import { MobXProviderContext } from 'mobx-react';\r\nimport React from 'react';\r\n\r\nfunction useStore<t>(storeName: string): t {\r\n  const { [storeName]: store } = React.useContext(MobXProviderContext);\r\n  return store;\r\n}\r\n\r\nexport default useStore;\r\n","import { cast, IAnyModelType, Instance, types } from 'mobx-state-tree';\r\n\r\nconst TreeNodeModel = types\r\n  .model('TreeNode', {\r\n    id: types.identifierNumber,\r\n    name: types.string,\r\n    description: types.maybeNull(types.string),\r\n    children: types.array(\r\n      types.safeReference(types.late((): IAnyModelType => TreeNodeModel))\r\n    ),\r\n    parent: types.maybeNull(\r\n      types.safeReference(types.late((): IAnyModelType => TreeNodeModel))\r\n    ),\r\n    isDroppable: true,\r\n  })\r\n  .actions((self) => ({\r\n    setChildren(childrenIds: number[]) {\r\n      self.children = cast(childrenIds);\r\n    },\r\n    setIsDroppable(isDroppable: boolean) {\r\n      self.isDroppable = isDroppable;\r\n    },\r\n  }))\r\n  .views((self) => ({\r\n    get isRoot() {\r\n      return self.parent === null;\r\n    },\r\n\r\n    get type() {\r\n      return 'TreeNode';\r\n    },\r\n\r\n    get nodeIndexInParentNode(): number | null {\r\n      if (!self.parent) {\r\n        return null;\r\n      }\r\n\r\n      return self.parent.children.findIndex(\r\n        (node: TreeNodeModelType) => node.id === self.id\r\n      );\r\n    },\r\n  }));\r\n\r\nexport type TreeNodeModelType = Instance<typeof TreeNodeModel>;\r\n\r\nexport default TreeNodeModel;\r\n","export const TreeData = [\r\n  {\r\n    id: 0,\r\n    name: 'root',\r\n    description: 'Root',\r\n    parent: null,\r\n    children: [1, 2, 3, 4],\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'child-1',\r\n    description: 'Child 1',\r\n    children: [5, 6],\r\n    parent: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'child-2',\r\n    description: 'Child 2',\r\n    parent: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'child-3',\r\n    description: 'Child 3',\r\n    parent: 0,\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'child-4',\r\n    description: 'Child 4',\r\n    parent: 0,\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'grandchild-1',\r\n    description: 'GrandChild 1',\r\n    parent: 1,\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'grandchild-2',\r\n    description: 'GrandChild 2',\r\n    parent: 1,\r\n  },\r\n];\r\n","import TreeNodeModel, { TreeNodeModelType } from '@/models/TreeNode';\r\nimport { cast, Instance, types } from 'mobx-state-tree';\r\nimport { TreeData } from './snapshots/treeData';\r\n\r\nconst AppStore = types\r\n  .model('AppStore', {\r\n    treeNodes: types.array(TreeNodeModel),\r\n    root: types.maybeNull(types.late(() => types.safeReference(TreeNodeModel))),\r\n  })\r\n  .actions((self) => ({\r\n    afterCreate() {\r\n      self.treeNodes = cast(TreeData);\r\n\r\n      //set root\r\n      self.root = self.treeNodes.find((treeNode) => treeNode.isRoot) ?? null;\r\n    },\r\n\r\n    moveTreeNodes(\r\n      dragNodeSnapshot: TreeNodeModelType,\r\n      hoverNode: TreeNodeModelType\r\n    ) {\r\n      const dragNode = self.treeNodes.find(\r\n        (node) => node.id === dragNodeSnapshot.id\r\n      );\r\n\r\n      console.log('move', dragNode?.id, hoverNode.id);\r\n      if (!dragNode) {\r\n        return;\r\n      }\r\n\r\n      const hoverNodeParent = hoverNode.parent;\r\n      const dragNodeParent = dragNode.parent;\r\n\r\n      //cannot hover into root\r\n      if (!hoverNodeParent || !dragNodeParent) {\r\n        return;\r\n      }\r\n\r\n      const hoverNodeIndex = hoverNode.nodeIndexInParentNode;\r\n\r\n      if (hoverNodeParent.id !== null && hoverNodeIndex !== null) {\r\n        //clone hover nodes\r\n        const newChildren = Array.from(\r\n          hoverNodeParent.children.map((child: TreeNodeModelType) => child.id)\r\n        );\r\n\r\n        //check if dragabble node belongs to same parent\r\n        const dragNodeIndex = newChildren.findIndex(\r\n          (childId) => childId === dragNode.id\r\n        );\r\n\r\n        //it not in hover, add it\r\n        if (dragNodeIndex === -1) {\r\n          console.log('adding');\r\n          newChildren.splice(hoverNodeIndex, 0, dragNode.id);\r\n          dragNode.parent = hoverNodeParent;\r\n\r\n          //remove from original parent\r\n          dragNodeParent.setChildren([\r\n            ...dragNodeParent.children.filter(\r\n              (child: TreeNodeModelType) => child.id !== dragNode.id\r\n            ),\r\n          ]);\r\n        } else {\r\n          console.log('swapping');\r\n          newChildren.splice(dragNodeIndex, 1, hoverNode.id);\r\n          newChildren.splice(hoverNodeIndex, 1, dragNode.id);\r\n        }\r\n\r\n        //set new children\r\n        hoverNodeParent.setChildren(newChildren);\r\n      }\r\n    },\r\n  }));\r\n\r\nexport const APP_STORE: Readonly<string> = AppStore.name;\r\nexport type AppStoreType = Instance<typeof AppStore>;\r\n\r\nexport default AppStore;\r\n","import { TreeNodeModelType } from '@/models/TreeNode';\r\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport useStore from '@hooks/useStore';\r\nimport { APP_STORE } from '@stores/AppStore';\r\nimport classNames from 'classnames';\r\nimport { observer, Observer } from 'mobx-react';\r\nimport React, { useCallback, useRef, useState } from 'react';\r\nimport {\r\n  DragObjectWithType,\r\n  DragSourceMonitor,\r\n  useDrag,\r\n  useDrop,\r\n} from 'react-dnd';\r\nimport { Button, Collapse, ListGroup, ListGroupItem } from 'reactstrap';\r\n\r\ninterface TreeNodePropsType {\r\n  node: TreeNodeModelType;\r\n}\r\n\r\nconst TreeNode: React.FC<TreeNodePropsType> = ({ node }: TreeNodePropsType) => {\r\n  const { moveTreeNodes } = useStore(APP_STORE);\r\n  const [opened, setOpened] = useState<boolean>(true);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const [{ isOverCurrent }, dropRef] = useDrop({\r\n    accept: node.type,\r\n    hover(item: DragObjectWithType & TreeNodeModelType, monitor) {\r\n      if (!ref.current || isOverCurrent === false) {\r\n        return;\r\n      }\r\n\r\n      const dragId = item.id;\r\n      const hoverId = node.id;\r\n\r\n      //if hovering itself\r\n      if (dragId === hoverId) {\r\n        return;\r\n      }\r\n\r\n      //if dragging into parent\r\n      if (node.children.includes(dragId)) {\r\n        return;\r\n      }\r\n\r\n      const hoveredRect = ref.current.getBoundingClientRect();\r\n      const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\r\n\r\n      const mousePosition = monitor.getClientOffset();\r\n      if (!mousePosition) {\r\n        return;\r\n      }\r\n\r\n      const hoverClientY = mousePosition.y - hoveredRect.top;\r\n\r\n      if (hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n\r\n      if (hoverClientY > hoverMiddleY) {\r\n        return;\r\n      }\r\n\r\n      moveTreeNodes(item, node);\r\n    },\r\n    collect: (monitor) => ({\r\n      isOverCurrent: monitor.isOver({ shallow: true }),\r\n    }),\r\n  });\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { ...node, type: node.type },\r\n    canDrag: !node.isRoot,\r\n    collect: (monitor: DragSourceMonitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n    end: (_dropResult, monitor) => {\r\n      const item = monitor.getItem();\r\n      const didDrop = monitor.didDrop();\r\n      if (!didDrop) {\r\n        console.log('drop', item.id, node.id);\r\n        moveTreeNodes(item, node);\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isDragging) {\r\n    //update parent to be not draggable\r\n    //node.parent.setIsDraggable(false);\r\n  }\r\n\r\n  const handleToggleButtonclick = useCallback(() => setOpened(!opened), [\r\n    opened,\r\n    setOpened,\r\n  ]);\r\n\r\n  drag(dropRef(ref));\r\n\r\n  return (\r\n    <div ref={ref} className={classNames({ 'h-100': node.isRoot })}>\r\n      <ListGroupItem\r\n        className={classNames({\r\n          'tree-view-item': true,\r\n          'opacity-0': isDragging,\r\n          'h-100': node.isRoot,\r\n        })}\r\n      >\r\n        {node.children.length > 0 && (\r\n          <Button\r\n            className=\"pl-0 no-underline no-box-shadow\"\r\n            color=\"link\"\r\n            onClick={handleToggleButtonclick}\r\n          >\r\n            {opened ? (\r\n              <FontAwesomeIcon icon={faMinus} />\r\n            ) : (\r\n              <FontAwesomeIcon icon={faPlus} />\r\n            )}\r\n          </Button>\r\n        )}\r\n        {node.description}\r\n        {node.children.length > 0 && (\r\n          <Collapse isOpen={opened}>\r\n            <Observer>\r\n              {() => (\r\n                <>\r\n                  {node.children?.map((treeNode) => (\r\n                    <ListGroup key={treeNode.id}>\r\n                      <TreeNode node={treeNode} />\r\n                    </ListGroup>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </Observer>\r\n          </Collapse>\r\n        )}\r\n      </ListGroupItem>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(TreeNode);\r\n","import TreeNode from '@components/TreeNode';\r\nimport useStore from '@hooks/useStore';\r\nimport { AppStoreType, APP_STORE } from '@stores/AppStore';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport { Col, Container, ListGroup, Row } from 'reactstrap';\r\n\r\nconst MainContent: React.FC = () => {\r\n  const { root } = useStore<AppStoreType>(APP_STORE);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"main-content vh-100\">\r\n        <Col md={9}>Main Editor</Col>\r\n        <Col md={3} className=\"p-0\">\r\n          <ListGroup className=\"h-100\">\r\n            {root && <TreeNode node={root} />}\r\n          </ListGroup>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(MainContent);\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  Collapse,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n} from 'reactstrap';\r\n\r\nconst NavigationBar: React.FC = () => {\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\" full>\r\n      <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"mr-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink href=\"/components/\">Components</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://github.com/reactstrap/reactstrap\">\r\n              GitHub\r\n            </NavLink>\r\n          </NavItem>\r\n          <UncontrolledDropdown nav inNavbar>\r\n            <DropdownToggle nav caret>\r\n              Options\r\n            </DropdownToggle>\r\n            <DropdownMenu right>\r\n              <DropdownItem>Option 1</DropdownItem>\r\n              <DropdownItem>Option 2</DropdownItem>\r\n              <DropdownItem divider />\r\n              <DropdownItem>Reset</DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n        <NavbarText>Simple Text</NavbarText>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Provider } from 'mobx-react';\nimport React from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport './App.scss';\nimport MainContent from './MainContent';\nimport AppStore, { APP_STORE } from './stores/AppStore';\nimport NavigationBar from './components/Navigation';\n\nconst stores = { [APP_STORE]: AppStore.create() };\n\nconst App: React.FC = () => {\n  return (\n    <Provider {...stores}>\n      <>\n        <NavigationBar />\n        <DndProvider backend={HTML5Backend}>\n          <MainContent />\n        </DndProvider>\n      </>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/scss/bootstrap.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}